Linux (Pronounced as LeeNux, not Liiiii Nux): It is operating system which is open source and mostly preferred OS for embedded developers as it gives more easy changes into the source code according to the user requirement. Linus Torvalds was frustrated by using UNIX OS and it's licensing so he decided to create his own OS which is Open source and can be easily modified by anyone and he was the one who created and started open source culture during 1990s era.

Linux word originated by renaming the LINUS and UNIX word together, forming LINUX.

Let's start with fundamentals of Linux Operating System:

1. Operating System: It is a system which handles both hardware and software resources and it's operations
2. Linux Operating System: Open source OS, which has kernel space. 
3. What is kernel: Kernel is core part of OS, like heart in our body, It acts as a bridge between applications and data processing. In other terms it is a software program that loads at the very start-up of any system. 

Now, why do we need kernel or what does it do?
	Kernel as mentioned earlier is the core part of OS and it is the very first program at the start of the system, where it performs tasks like TASK scheduling, DISK Management, and Memory management. 

NOTE: There are 2 spaces in operating system
			Kernel space where the space is used for the internal applications
			User space is used by the user to run or create his own applications

4. There 5 types of Kernel:
		Micro:  (uk), This kernel has different space for user and kernel. As a result size of the kernel and OS is reduced. 
		Monolithic: Is where the Kernel and user have same memory space, What happens if both spaces are on the same memory? , 
									Size increases, and as no shared spaces it executes and runs faster than other OS like UNIX, Linux. But if there's any crash in the code then whole system 
									will fail. As single space they're not portable( if anything new code has to be included then whole space has to rewritten) 
		Hybrid: This is combination of both monolithic and micro kernel, it can be known as extended version of a microkernel with additional properties of monolithic kernel.
						It needs some additional code in kernel space to enhance the performance of the system.
		Nano: The code of the kernel is very small, which means the code executing in the priviliged mode of the hardware is very small. Here, nano means it supports nanosecond 					clock resolution
		Exo: This is still in developing mode and resource protection is kept seperated from management, which allows us to perform application specific customization
Q) what type of Kernel is running in present OS?

NOTE: you might have heard of Debian, Redhat, fedora and other type of Linux OS right?, basically these are packages/distributions of Linux.

Now these are the very basic fundamentals of linux OS.

Let us now start by learning the components of Linux system. There are three main bodies of the code. which I will ask you people to find it before I complete this particular topic.

As you already know that user space and kernel space are the two spaces which define the type of OS like I mentioned above micro, monolithic, hybrid, nano and exo.
Linux is monolithic OS.

And In user Space we need User Interface, so that we as an user can interact with OS. 

In user mode, we have standard utility programs, where the User Interace like Shell, editors, compilers etc are communicated.

Next in the same user  mode, we also have Standard library, where using library interface we can interact with this standard library. These functions include open, close, read, write, fork etc.

Next comes the kernel mode, where UNIX Operating system exists, and this is communicated using system call interface. where the operations include process management, memory management, the file system, I/O. 

All these are on the hardware, like CPU, memory, disks, terminals etc.

Now consicing all of the above what are the three main bodies of the code?
	1. Standard utility program
	2. Standard Library
	3. Kernel
These are the components of a Linux System

Let's know more about THE KERNEL
	
	As I mentioned above Linux kernel uses a monolithic model.
	The kernel code is executed in kernel mode with full access to all the physical resources of the computer. 

Now, as each system is divided into subsystems. Even Linux Kernel have subsystem
	1. Process Management
	2. Memory Management
	3. File System
	4. Device Control
	5. Networking

1. Process Management: Performs Inter process communication to communicate between different processes, Creation and destroying of the process along with it's scheduling is also part of the process management.
2. Memory Management: For us embedded engineers this is a major resource. A virtual	file system is built using this memory management.
3. In File System almost everything is treated as file, and supports multiple files
4. Device Control is where the device driver is used to access the device, almost every system maps to a phyical devcie.
5. Networking subsystem collects, identifies, and dispatched to the process. routing and ARP are implementedwithin the kernel.

Now any system needs bootloader to load the system. Bootloader is nothing but kernel loader, the task is to load linux kernel. GRUB and LILO are most popular Linux Boot loaders.

What is GRUB?
	GRand Unified Bootloader, OS independent Bootloader.

There is a image for kernel known as Kernel Image, which is always stored on memory until it's turned off. It is non executable kernel, but a compressed kernel image.

ZImage size is less than 512kb
bzImage size is greater than 512kb

Now the first thing the kernel does is to execute INIT program, which is root/parent of all processes executing on Linux.

The first process the init starts is a script /etc/rc.d/rc.sysinit, this process is identified by process ID 1. It is responsible for starting system process as defined in /etc/inittab file.

Now what does this inittab file contain?
	1. This file describes which process are started at the bootup and during normal operation. 
			/etc/init.d/boot
			/etc/init.d/rc
	2. The computer will be booted to the runlevel as defined by the initdefault directive; id:5:initdefault:

	What is Runlevel?
		is a configuration made in software which allows only a selected group of processes to exist. These runlevels can be from from 0 to 6
		S and M are for single and multiuser respectively.


	init.d is a directory that admin can start/stop the individual background process(also called as DEAMON), start/stop deamon can start, stop, status, restart and reload by issuing the command.




	CONGRATULATIONS!
	ALL OF THE ABOVE FORMS THE VERY BASIC OF THE LINUX.


	
Let us now start with Linux OS;
	1. Linux Commands: is a program which interacts with the kernel to perform functions called for. it can be built it shell command, or an executable shell file( also known as shell script).

	Now, What is this shell?
		It is a command line interpreter. The user can interact with the kernel using Shell by writing ASCII scripts. 

NOTE: A rule while using linux machines is to never login with root unless you have to and at the inital setup, the reason being the protection mechanisms can be altered and and has access to everything by default. 

NOTE: In linux machine the HELP equivalent is man(Manual) function. 
			Syntax: man <command>

			q - quit
			f - scroll forward
			b - scroll backward

Basics: To execute a command type it's name and arguments at the command line.
		eg: ls -l /etc
			ls: command name
			-l: optional flag
			etc: arguments

			If we have to redirect output then ls -l >output

			If we have to redirect the input then wa<input

			The output of one command can become input for other: ps aux | grep netscape | wc -1; the output of ps command is sent to grep, grep takes input from ps and searches for netscape and passign these lines to wc, wc takes the input and count the lines and its output going to console.

			grep command searches files for one or more files, it does simple string, regular expression, and extended expression.

Talking about file permissions, linux provides three kinds of permissions:
	a. Read
	b. Write
	c. Execute

	The command to see what options the file has is to use ls -l command. where the command displays permissions, owner, group,.

	While displaying permissions the format would look something like this -rwxrwxrwx, - indicates directory flag (d=directory, l=link), rwx after that from left to right indicates the permissions owner has, after that rwx indicates group permission, and the remaining rwx indicates other permissions.

	How do you change the permissions? by using chmod command. These permissions are encoded as an octal number. 

Let's make a list of common commands and popular ones for file managements.
	1. df : disk free space
		df -k
		df -h
	2. du : How much disk space a directory	and its files contain
		du <directory>
		du -sk <directory>
		du -sh <directory>
	3. mount : Used to mount a filesystem
		mount <filesystem>
		mount -a
	4. umount : unmounts a filesystem
		umount <filesystem>
	5. pwd: Print or list the present working directory with full path
	6. rm : Remove files
		rm -rf
	7. rmdir : remove directory
		rmdir <directory>
	8. touch : Change the file timestamps to the current time. Also makes the file if it doesn't exists
		touch <filename>
	9. whereis : Locate the binary and manual page files for a command
		whereis <program/command>
	10. which : Show full path of commands where given commands reside
		which <command>
	11. gzip : zip file to gzip
	12. gunzip : unzip file to gz file
	13. tar : Archive files and directories.
	14. zip : Compresses the file to a .zip file 
	15. unzip : Uncompresses the file with .zip	extension
	16. vi : Editot with command and text mode
	17. gedit : GUI text editor
	18. tail : Look at the last 10 lines of the code
		tail -f <filename>
		tail -100 <filename>
	19. head : Look at the last 10 lines of a file
		head <filename>
	20. su : switch user accounts. 
		su <accountname>
				Type exit to return to the previous account
	21. dnsdomainname : shows system DNS domain name
	22. hostname : used to show or set the name of your machine for networking
	23. route : Show or manipulate the IP routing table 
			route 
			route add
			route del
	24. showmount : show mount information for an NFS server
	25. ssh : Secure Login 
			ssh <remote system name/ip>
	26. ftp : File Transfer Protocol 
			ftp <remote system name/ip>
	27. ifconfig : configure a network interface
			ifconfig eth0 address 172.31.2.2 netmask 255.255.0.0
	28. ifdown : Shutdown the network interface
			ifdown eth0
	29. ifup : Brings up the network interface 
			ifup eth0
	30. exit : Terminates the shell
	31. logout : Log the user off the system
	32. poweroff : brings the system down
	33. reboot : reboot the system
	34. runlevel : List the current and previous level
	35. shutdown : This command can be used to shutdown the system until the system is halted.
			shutdown -h +10 'We will install a new disk. the system should be back online in three hours'
						+time(minutes) until the system is halted

	36. cal : Calendar
	37. date : prints th system date and time
	38. hwclock : Set or read the hardware CMOS clock
	39. uptime : Reports how long the system has been running
	40. info : provides the information of the system
	
These are few commands that are required for basic usage. You don't have to remember everything in this list, as you use more then you'll remember more commands.

You might be wondering why these commands are helpful, as a embedded developers we need it for debugging purpose.

There's an attached document with some extra commands.


This sums up the basics of the Linux Internal Topics and the basic information.

Next Topic to focus on is the Linux Shell Scripting attached as a different file

